{"version":3,"sources":["App.js","index.js"],"names":["TopDisplay","_ref","totalCalories","goal","setGoal","cookieKey","cookies","items","cookieOptions","React","createElement","className","type","value","onChange","event","goalValue","parseInt","target","set","_toConsumableArray","App","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setItems","_useState5","_useState6","foodEntry","setFoodEntry","_useState7","_useState8","calorieEntry","setCalorieEntry","_useState9","_useState10","setTotalCalories","cookieExpireDate","Date","result","setDate","getDate","path","expires","countCalories","newItem","total","calories","forEach","item","countLoadedItems","Cookies","retrieved","get","length","class","Button","onClick","food","id","getTime","concat","map","newItems","filter","x","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2NAKMA,EAAa,SAAHC,GAChB,IADsBC,EAAaD,EAAbC,cAAeC,EAAIF,EAAJE,KAAMC,EAAOH,EAAPG,QAASC,EAASJ,EAATI,UAAWC,EAAOL,EAAPK,QAASC,EAAKN,EAALM,MAAOC,EAAaP,EAAbO,cAE7E,OACEC,IAAAC,cAAA,OAAKC,UAAU,aACTF,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,UAAKR,IAEPO,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,SAAOC,UAAU,8BAA8BC,KAAK,SAASC,MAAOV,EAAMW,SAAU,SAACC,GACnF,IAAIC,EAAYC,SAASF,EAAMG,OAAOL,OAASI,SAASF,EAAMG,OAAOL,OAAS,EAC9ET,EAAQY,GACRV,EAAQa,IAAId,EAAW,CAACE,MAAKa,YAAMb,GAAQJ,KAAMa,GAAYR,UAsH9Da,MA9Gf,WAAe,IAAAC,EAEWC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA5BnB,EAAIqB,EAAA,GAAEpB,EAAOoB,EAAA,GAAAE,EACMH,mBAAS,IAAGI,EAAAF,YAAAC,EAAA,GAA/BnB,EAAKoB,EAAA,GAAEC,EAAQD,EAAA,GAAAE,EACYN,mBAAS,SAAQO,EAAAL,YAAAI,EAAA,GAA5CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAAAG,EACUV,mBAAS,KAAIW,EAAAT,YAAAQ,EAAA,GAA9CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAAAG,EACMd,mBAAS,GAAEe,EAAAb,YAAAY,EAAA,GAA9CnC,EAAaoC,EAAA,GAAEC,EAAgBD,EAAA,GAElCE,EAAmB,IAAIC,KAEvBC,EAASF,EAAiBG,QAAQH,EAAiBI,UADnC,GAEhBpC,EAAgB,CAACqC,KAAM,IAAKC,QAAS,IAAIL,KAAKC,IAE5CK,EAAgB,SAACC,GACrB,IAAIC,EAAQ,EAETD,IAEDC,GAASD,EAAQE,UAGnB3C,EAAM4C,QAAQ,SAAAC,GACZH,GAASG,EAAKF,WAEhBX,EAAiBU,IAGbI,EAAmB,SAAC9C,GACxB,IAAI0C,EAAQ,EACZ1C,EAAM4C,QAAQ,SAAAC,GACZH,GAASG,EAAKF,WAEhBX,EAAiBU,IAIb3C,EAAU,IAAIgD,IACdjD,EAAY,iBACdkD,EAAYjD,EAAQkD,IAAInD,GAiB5B,OAfGkD,GAAehD,GAA0B,IAAjBA,EAAMkD,SAE5BF,EAAUhD,MAAMkD,SAEjB7B,EAAS2B,EAAUhD,OACnB8C,EAAiBE,EAAUhD,QAG1BgD,EAAUpD,MAAiB,IAATA,IAEnBC,EAAQmD,EAAUpD,MAClBkD,EAAiBE,EAAUhD,SAK7BE,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,WACED,IAAAC,cAACV,EAAU,CAACE,cAAeA,EAAeC,KAAMA,EAAMC,QAASA,EAASC,UAAWA,EAAWC,QAASA,EAASC,MAAOA,EAAOC,cAAeA,IAC7IC,IAAAC,cAAA,OAAKgD,MAAM,uBACTjD,IAAAC,cAAA,OAAKgD,MAAM,OACTjD,IAAAC,cAAA,OAAKgD,MAAM,wBAAuB,QAGlCjD,IAAAC,cAAA,OAAKgD,MAAM,wBAAuB,YAGlCjD,IAAAC,cAAA,OAAKgD,MAAM,0BAEbjD,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,SAAOC,UAAU,uBAAuBC,KAAK,OAAOC,MAAOkB,EAAWjB,SAAU,SAACC,GAAWiB,EAAajB,EAAMG,OAAOL,UACtHJ,IAAAC,cAAA,SAAOC,UAAU,uBAAuBC,KAAK,SAASC,MAAOsB,EAAcrB,SAAU,SAACC,GAAWqB,EAAgBnB,SAASF,EAAMG,OAAOL,OAASI,SAASF,EAAMG,OAAOL,OAAS,MAC/KJ,IAAAC,cAACiD,IAAM,CAAChD,UAAU,uCAAuCiD,QAAS,WAChE,IAAIZ,EAAU,CAACa,KAAM9B,EAAWmB,SAAUf,EAAc2B,IAAI,IAAIrB,MAAOsB,WACvEnC,EAAQ,GAAAoC,OAAA5C,YAAKb,GAAK,CAAEyC,KACpBhB,EAAa,IACbI,EAAgB,GAChBW,EAAcC,GACd1C,EAAQa,IAAId,EAAW,CAACE,MAAK,GAAAyD,OAAA5C,YAAMb,GAAK,CAAEyC,IAAU7C,KAAMA,GAAOK,KAChE,QAEJD,EAAM0D,IAAI,SAAAb,GAAI,OACb3C,IAAAC,cAAA,UACED,IAAAC,cAAA,OAAKgD,MAAM,OACTjD,IAAAC,cAAA,OAAKgD,MAAM,6BACRN,EAAKS,MAERpD,IAAAC,cAAA,OAAKgD,MAAM,6BACRN,EAAKF,UAERzC,IAAAC,cAACiD,IAAM,CAAChD,UAAU,sCAAsCiD,QAAS,WAC/D,IAAIM,EAAQ9C,YAAOb,EAAM4D,OAAO,SAAAC,GAAC,OAAIA,EAAEN,KAAOV,EAAKU,MAC/CI,IACFA,EAAW,IAEbtC,EAASsC,GACTnB,IACAzC,EAAQa,IAAId,EAAW,CAACE,MAAO2D,EAAU/D,KAAMA,GAAOK,KACrD,mBCzHR6D,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhE,IAAAC,cAACD,IAAMiE,WAAU,KACfjE,IAAAC,cAACW,EAAG","file":"static/js/main.17d06bc9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport Cookies from 'universal-cookie';\n\nconst TopDisplay = ({ totalCalories, goal, setGoal, cookieKey, cookies, items, cookieOptions }) => \n{\n  return (\n    <div className='container'>\n          <div className='row'> \n            <div className='col-sm-4'>\n              <h1>Calories</h1>\n              <h2>{totalCalories}</h2>\n            </div>\n            <div className='col-sm-4'>\n              <h1>Goal</h1>\n              <input className='marginSmall goalNumberWidth' type=\"number\" value={goal} onChange={(event) => {\n                let goalValue = parseInt(event.target.value) ? parseInt(event.target.value) : 0;\n                setGoal(goalValue);\n                cookies.set(cookieKey, {items: [...items], goal: goalValue}, cookieOptions);\n                }}/>\n            </div>\n          </div>\n        </div>\n  );\n};\n\nfunction App() {\n\n  const [goal, setGoal] = useState(0);\n  const [items, setItems] = useState([]);\n  const [foodEntry, setFoodEntry] = useState(\"Bagel\");\n  const [calorieEntry, setCalorieEntry] = useState(100);\n  const [totalCalories, setTotalCalories] = useState(0);\n\n  let cookieExpireDate = new Date();\n  let daysTilExpire = 6;\n  let result = cookieExpireDate.setDate(cookieExpireDate.getDate() + daysTilExpire);\n  let cookieOptions = {path: '/', expires: new Date(result)};\n\n  const countCalories = (newItem) => {\n    let total = 0;\n\n    if(newItem)\n    {\n      total += newItem.calories;\n    }\n    \n    items.forEach(item => {\n      total += item.calories;\n    });\n    setTotalCalories(total);\n  };\n\n  const countLoadedItems = (items) => {\n    let total = 0;\n    items.forEach(item => {\n      total += item.calories;\n    });\n    setTotalCalories(total);\n  };\n\n  // Load Cookies if found...\n  const cookies = new Cookies();\n  const cookieKey = 'myCalorieCount';\n  let retrieved = cookies.get(cookieKey);\n\n  if(retrieved && (!items || items.length === 0))\n  {\n    if(retrieved.items.length)\n    {\n      setItems(retrieved.items);\n      countLoadedItems(retrieved.items);\n    }\n\n    if(retrieved.goal && goal === 0)\n    {\n      setGoal(retrieved.goal);\n      countLoadedItems(retrieved.items);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TopDisplay totalCalories={totalCalories} goal={goal} setGoal={setGoal} cookieKey={cookieKey} cookies={cookies} items={items} cookieOptions={cookieOptions}/>\n          <div class=\"container marginTop\">\n            <div class=\"row\">\n              <div class=\"col-sm-4 marginSmall\">\n                Food\n              </div>\n              <div class=\"col-sm-2 marginSmall\">\n                Calories\n              </div>\n              <div class=\"col-sm-2 marginSmall\"/>\n            </div>\n            <div className='row'>\n              <input className='col-sm-4 marginSmall' type=\"text\" value={foodEntry} onChange={(event) => {setFoodEntry(event.target.value); }}/>\n              <input className='col-sm-2 marginSmall' type=\"number\" value={calorieEntry} onChange={(event) => {setCalorieEntry(parseInt(event.target.value) ? parseInt(event.target.value) : 0)}}/>\n              <Button className='col-sm-2 marginSmall btn btn-primary' onClick={() => {\n                let newItem = {food: foodEntry, calories: calorieEntry, id: new Date().getTime()};\n                setItems([...items, newItem]);\n                setFoodEntry('');\n                setCalorieEntry(0);\n                countCalories(newItem);\n                cookies.set(cookieKey, {items: [...items, newItem], goal: goal}, cookieOptions);\n              }}>Add</Button>\n            </div>\n            {items.map(item => (\n              <li>\n                <div class=\"row\">\n                  <div class=\"col-sm-4 marginSmall item\">\n                    {item.food}\n                  </div>\n                  <div class=\"col-sm-2 marginSmall item\">\n                    {item.calories}\n                  </div>\n                  <Button className='col-sm-2 marginSmall btn btn-danger' onClick={() => {\n                    let newItems = [...items.filter(x => x.id !== item.id)];\n                    if(!newItems) {\n                      newItems = [];\n                    }\n                    setItems(newItems);\n                    countCalories();\n                    cookies.set(cookieKey, {items: newItems, goal: goal}, cookieOptions);\n                  }}>Delete</Button>\n                </div>\n              </li>\n            ))}\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}